"GREEN REGENCY TEACUP AND SAUCER",
#          "ALARM CLOCK BAKELIKE RED ",
"REGENCY CAKESTAND 3 TIER")
#cart <- as(list(cart), "itemMatrix")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#rules.sub <- is.subset(association.rules, cart, proper = FALSE)
#shows subset of rules matching cart
inspect(rules.sub)
#converts subset of rules to data frame, separating out lhs and rhs
recom <- DATAFRAME(rules.sub, separate=TRUE)
#prints out only rhs (will be used to generate recommendation)
print(recom$RHS, max.levels = 0)
association.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.7,maxlen=100))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.1, conf=0.7,maxlen=100))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.09, conf=0.7,maxlen=100))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.7,maxlen=100))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.001, conf=0.7,maxlen=100))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.001, conf=0.7,maxlen=5))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.001, conf=0.7,maxlen=5))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.009, conf=0.7,maxlen=5))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.7,maxlen=5))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.5,maxlen=5))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.5,maxlen=5))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.02, conf=0.5,maxlen=5))
inspect(association.rules)
shiny::runApp('C:/Git/CSML1000-Group_10-Assignment_2/shiny-dev')
runApp('C:/Git/CSML1000-Group_10-Assignment_2/shiny-dev')
runApp('C:/Git/CSML1000-Group_10-Assignment_2/shiny-dev')
runApp('C:/Git/CSML1000-Group-10-assignment-1/shiny')
runApp('C:/Git/CSML1000-Group_10-Assignment_2/shiny-dev/app2.R')
runApp('C:/Git/CSML1000-Group_10-Assignment_2/shiny-dev/app2.R')
runApp('C:/Git/CSML1000-Group_10-Assignment_2/shiny-dev/app2.R')
runApp('C:/Git/CSML1000-Group_10-Assignment_2/shiny-dev/app2.R')
library(rCBA)
library(arules)
colvec <- c("InvoiceNo","Description")
trans <- arules::read.transactions(
file = "./data/OnlineRetail.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
data<-read.csv("./data/OnlineRetail.csv")
data<-read.csv("./data/OnlineRetail.csv")
View(data)
data <- data[ -c(2, 4:8) ]
View(data)
train <- sapply(data, as.factor)
View(train)
train <- data.frame(train, check.names=FALSE)
txns <- as(train,"transactions")
View(txns)
association.rules = rCBA::fpgrowth(txns, support = 0.001, confidence = 0.7, maxLength = 5,
consequent = "Description", verbose = TRUE, parallel = FALSE)
View(train)
?fpgrowth
View(train)
#libraries
library(arules)
colvec <- c("InvoiceNo","Description")
# read transactions from csv
trans <- read.transactions(
file = "./data/OnlineRetail.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
association.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.7,maxlen=5))
inspect(association.rules)
#generate sample shopping cart
cart <- c("ALARM CLOCK BAKELIKE GREEN")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %in% cart & !(rhs %in% cart))
#shows subset of rules matching cart
inspect(rules.sub)
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#shows subset of rules matching cart
inspect(rules.sub)
#generate sample shopping cart
cart <- c("ALARM CLOCK BAKELIKE GREEN",
"ALARM CLOCK BAKELIKE PINK")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#shows subset of rules matching cart
inspect(rules.sub)
cart <- c("ALARM CLOCK BAKELIKE GREEN",
"ALARM CLOCK BAKELIKE PINK",
"ALARM CLOCK BAKELIKE RED ")
cart <- c("ALARM CLOCK BAKELIKE GREEN",
"ALARM CLOCK BAKELIKE PINK",
"ALARM CLOCK BAKELIKE RED ")
#generate sample shopping cart
cart <- c("ALARM CLOCK BAKELIKE GREEN",
"ALARM CLOCK BAKELIKE PINK")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#shows subset of rules matching cart
inspect(rules.sub)
#generate sample shopping cart
cart <- c("REGENCY TEA PLATE GREEN ")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#shows subset of rules matching cart
inspect(rules.sub)
cart <- c("ALARM CLOCK BAKELIKE GREEN",
"ALARM CLOCK BAKELIKE PINK",
"REGENCY TEA PLATE ROSES ",
"GREEN REGENCY TEACUP AND SAUCER",
#          "ALARM CLOCK BAKELIKE RED ",
"REGENCY CAKESTAND 3 TIER")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#shows subset of rules matching cart
inspect(rules.sub)
#generate sample shopping cart
cart <- c("ALARM CLOCK BAKELIKE GREEN",
"ALARM CLOCK BAKELIKE PINK",
"REGENCY TEA PLATE ROSES ",
"GREEN REGENCY TEACUP AND SAUCER",
"ALARM CLOCK BAKELIKE RED ",
"REGENCY CAKESTAND 3 TIER")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#shows subset of rules matching cart
inspect(rules.sub)
#converts subset of rules to data frame, separating out lhs and rhs
recom <- DATAFRAME(rules.sub, separate=TRUE)
View(recom)
#converts subset of rules to data frame, separating out lhs and rhs
recom <- DATAFRAME(rules.sub, separate=FALSE)
#converts subset of rules to data frame, separating out lhs and rhs
recom <- DATAFRAME(rules.sub, separate=TRUE)
#prints out only rhs (will be used to generate recommendation)
print(recom$RHS, max.levels = 0)
runApp('C:/Git/CSML1000-Group_10-Assignment_2/shiny-dev/app2.R')
association.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.5,maxlen=5))
inspect(association.rules)
View(recom)
association.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.5,maxlen=5))
# Combine two data frames ----
#dat1<-read.csv("./data/OnlineRetail.csv")
#dat2<-read.csv("./data/OnlineRetail.csv")
#combined <- rbind (dat1, dat2)
#write.csv(combined, "./data/online_retail_II_combined.csv")
# aPriori ---------------------------------------------------------------------
#libraries
library(arules)
# Reading the data file
mydata<-read.csv("./data/OnlineRetail.csv")
#remove 1st column (counting # of items in basket)
#mydata <- mydata[,-1]
#write updated CSV with removed column
#mydata <- write.csv(mydata, "./data/groceriesClean.csv")
#read updated CSV into transactions object
#trans <- read.transactions("./data/groceriesClean.csv", format="single", sep=",", cols=1)
colvec <- c("InvoiceNo","Description")
# read transactions from csv
trans <- read.transactions(
file = "./data/OnlineRetail.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
itemFrequencyPlot(trans,topN=20,type="relative",main="Relative Item Frequency Plot")
association.rules <- apriori(trans, parameter = list(supp=0.009, conf=0.5,maxlen=5))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.05, conf=0.5,maxlen=5))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.5,maxlen=5))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.5,maxlen=5))
association.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.5,maxlen=5))
inspect(association.rules)
# Combine two data frames ----
#dat1<-read.csv("./data/OnlineRetail.csv")
#dat2<-read.csv("./data/OnlineRetail.csv")
#combined <- rbind (dat1, dat2)
#write.csv(combined, "./data/online_retail_II_combined.csv")
# aPriori ---------------------------------------------------------------------
#libraries
library(arules)
# Reading the data file
#mydata<-read.csv("./data/OnlineRetail.csv")
mydata<-read.csv("./data/online_retail_II_combined.csv")
#remove 1st column (counting # of items in basket)
#mydata <- mydata[,-1]
#write updated CSV with removed column
#mydata <- write.csv(mydata, "./data/groceriesClean.csv")
#read updated CSV into transactions object
#trans <- read.transactions("./data/groceriesClean.csv", format="single", sep=",", cols=1)
colvec <- c("InvoiceNo","Description")
# read transactions from csv
trans <- read.transactions(
file = "./data/OnlineRetail.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
itemFrequencyPlot(trans,topN=20,type="relative",main="Relative Item Frequency Plot")
?itemFrequencyPlot
itemFrequencyPlot(trans,topN=20,type="absolute",main="Relative Item Frequency Plot")
itemFrequencyPlot(trans,topN=20,type="absolute",main="Absolute Item Frequency Plot")
# Combine two data frames ----
#dat1<-read.csv("./data/OnlineRetail.csv")
#dat2<-read.csv("./data/OnlineRetail.csv")
#combined <- rbind (dat1, dat2)
#write.csv(combined, "./data/online_retail_II_combined.csv")
# aPriori ---------------------------------------------------------------------
#libraries
library(arules)
# Reading the data file
#mydata<-read.csv("./data/OnlineRetail.csv")
mydata<-read.csv("./data/online_retail_II_combined.csv")
mydata <- mydata[-grep("C", mydata$InvoiceNo),]
mydata <- mydata[-grep("A", mydata$InvoiceNo),]
mydata <- mydata[!(mydata$Description == ""),]
#remove 1st column (counting # of items in basket)
#mydata <- mydata[,-1]
#write updated CSV with removed column
#mydata <- write.csv(mydata, "./data/groceriesClean.csv")
#read updated CSV into transactions object
#trans <- read.transactions("./data/groceriesClean.csv", format="single", sep=",", cols=1)
colvec <- c("InvoiceNo","Description")
# read transactions from csv
trans <- read.transactions(
file = "./data/OnlineRetail.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
itemFrequencyPlot(trans,topN=20,type="absolute",main="Absolute Item Frequency Plot")
View(mydata)
# Combine two data frames ----
#dat1<-read.csv("./data/OnlineRetail.csv")
#dat2<-read.csv("./data/OnlineRetail.csv")
#combined <- rbind (dat1, dat2)
#write.csv(combined, "./data/online_retail_II_combined.csv")
# aPriori ---------------------------------------------------------------------
#libraries
library(arules)
# Reading the data file
#mydata<-read.csv("./data/OnlineRetail.csv")
mydata<-read.csv("./data/online_retail_II_combined.csv")
mydata <- mydata[-grep("C", mydata$InvoiceNo),]
mydata <- mydata[-grep("A", mydata$InvoiceNo),]
mydata <- mydata[!(mydata$Description == ""),]
write.csv(mydata, "./data/online_retail_II_combined_clean.csv")
#remove 1st column (counting # of items in basket)
#mydata <- mydata[,-1]
#write updated CSV with removed column
#mydata <- write.csv(mydata, "./data/groceriesClean.csv")
#read updated CSV into transactions object
#trans <- read.transactions("./data/groceriesClean.csv", format="single", sep=",", cols=1)
colvec <- c("InvoiceNo","Description")
# read transactions from csv
trans <- read.transactions(
file = "./data/online_retail_II_combined_clean.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
itemFrequencyPlot(trans,topN=20,type="absolute",main="Absolute Item Frequency Plot")
association.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.6,maxlen=5))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.5,maxlen=5))
inspect(association.rules)
# Combine two data frames ----
#dat1<-read.csv("./data/OnlineRetail.csv")
#dat2<-read.csv("./data/OnlineRetail.csv")
#combined <- rbind (dat1, dat2)
#write.csv(combined, "./data/online_retail_II_combined.csv")
# aPriori ---------------------------------------------------------------------
#libraries
library(arules)
# Reading the data file
#mydata<-read.csv("./data/OnlineRetail.csv")
mydata<-read.csv("./data/online_retail_II_combined.csv")
mydata <- mydata[-grep("C", mydata$InvoiceNo),]
mydata <- mydata[-grep("A", mydata$InvoiceNo),]
mydata <- mydata[!(mydata$Description == ""),]
mydata <- mydata[!(mydata$Description == "DOTCOM POSTAGE"),]
write.csv(mydata, "./data/online_retail_II_combined_clean.csv")
#remove 1st column (counting # of items in basket)
#mydata <- mydata[,-1]
#write updated CSV with removed column
#mydata <- write.csv(mydata, "./data/groceriesClean.csv")
#read updated CSV into transactions object
#trans <- read.transactions("./data/groceriesClean.csv", format="single", sep=",", cols=1)
colvec <- c("InvoiceNo","Description")
# read transactions from csv
trans <- read.transactions(
file = "./data/online_retail_II_combined_clean.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
itemFrequencyPlot(trans,topN=20,type="absolute",main="Absolute Item Frequency Plot")
association.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.5,maxlen=5))
inspect(association.rules)
association.rules <- apriori(trans, parameter = list(supp=0.001, conf=0.5,maxlen=5))
inspect(association.rules)
library(shiny); runApp('C:/Git/CSML1000-Group_10-Assignment_2/shiny-dev/app2.R')
library(shiny); runApp('C:/Git/CSML1000-Group_10-Assignment_2/shiny-dev/app2.R')
association.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.5,maxlen=10))
inspect(association.rules)
#generate sample shopping cart
cart <- c("RED RETROSPOT CHARLOTTE BAG")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#shows subset of rules matching cart
inspect(rules.sub)
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %in% cart))
#shows subset of rules matching cart
inspect(rules.sub)
#generate sample shopping cart
cart <- c("RED RETROSPOT CHARLOTTE BAG")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#shows subset of rules matching cart
inspect(rules.sub)
capture.output(outputvar)
cart <- c("RED RETROSPOT CHARLOTTE BAG")
cart <- c("RED RETROSPOT CHARLOTTE BAG")
#generate sample shopping cart
cart <- c("RED RETROSPOT CHARLOTTE BAG")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %in% cart & !(rhs %in% cart))
#shows subset of rules matching cart
inspect(rules.sub)
cart <- c("RED RETROSPOT CHARLOTTE BAG")
#cart <- as(list(cart), "itemMatrix")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#rules.sub <- is.subset(association.rules, cart, proper = FALSE)
#shows subset of rules matching cart
inspect(rules.sub)
#converts subset of rules to data frame, separating out lhs and rhs
recom <- DATAFRAME(rules.sub, separate=TRUE)
#generate sample shopping cart
cart <- c("CHARLOTTE BAG SUKI DESIGN",
"PACK OF 72 RETROSPOT CAKE CASES",
"RED RETROSPOT CHARLOTTE BAG",
"REGENCY CAKESTAND 3 TIER",
"WOODLAND CHARLOTTE BAG")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#shows subset of rules matching cart
inspect(rules.sub)
association.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.7,maxlen=10))
inspect(association.rules)
#save(association.rules, file="rules.RData")
#generate sample shopping cart
cart <- c("CHARLOTTE BAG SUKI DESIGN",
"PACK OF 72 RETROSPOT CAKE CASES",
"RED RETROSPOT CHARLOTTE BAG",
"REGENCY CAKESTAND 3 TIER",
"WOODLAND CHARLOTTE BAG")
#cart <- as(list(cart), "itemMatrix")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#rules.sub <- is.subset(association.rules, cart, proper = FALSE)
#shows subset of rules matching cart
inspect(rules.sub)
#converts subset of rules to data frame, separating out lhs and rhs
recom <- DATAFRAME(rules.sub, separate=TRUE)
#prints out only rhs (will be used to generate recommendation)
print(recom$RHS, max.levels = 0)
association.rules <- apriori(trans, parameter = list(supp=0.001, conf=0.5,maxlen=100))
association.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.5,maxlen=20))
colvec <- c("InvoiceNo","Description")
# read transactions from csv
trans <- read.transactions(
file = "./data/online_retail_II_combined_clean.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
itemFrequencyPlot(trans,topN=20,type="relative",main="Relative Item Frequency Plot")
#apriori algorithm
#apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.7,minlen = 3, maxlen=5))
#inspect(apriori.rules)
#FP growth
#fp.rules <- rCBA::fpgrowth(trans, support = 0.01, confidence = 0.7, minlen = 3, maxlen = 5)
#inspect(fp.rules)
#ECLAT algorithm
eclat.itemset <- eclat(trans, parameter = list(supp=0.005,maxlen=20))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.5)
inspect(eclat.rules)
colvec <- c("InvoiceNo","Description")
# read transactions from csv
trans <- read.transactions(
file = "./data/online_retail_II_combined_clean.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
itemFrequencyPlot(trans,topN=20,type="relative",main="Relative Item Frequency Plot")
#apriori algorithm
#apriori.rules <- apriori(trans, parameter = list(supp=0.01, conf=0.7,minlen = 3, maxlen=5))
#inspect(apriori.rules)
#FP growth
#fp.rules <- rCBA::fpgrowth(trans, support = 0.01, confidence = 0.7, minlen = 3, maxlen = 5)
#inspect(fp.rules)
#ECLAT algorithm
eclat.itemset <- eclat(trans, parameter = list(supp=0.005,maxlen=20))
eclat.rules <- ruleInduction(eclat.itemset, trans, confidence = 0.5)
inspect(eclat.rules)
# Combine two data frames ----
#dat1<-read.csv("./data/OnlineRetail.csv")
#dat2<-read.csv("./data/OnlineRetail.csv")
#combined <- rbind (dat1, dat2)
#write.csv(combined, "./data/online_retail_II_combined.csv")
# aPriori ---------------------------------------------------------------------
#libraries
library(arules)
# Reading the data file
#mydata<-read.csv("./data/OnlineRetail.csv")
#mydata<-read.csv("./data/online_retail_II_combined.csv")
#mydata <- mydata[-grep("C", mydata$InvoiceNo),]
#mydata <- mydata[-grep("A", mydata$InvoiceNo),]
#mydata <- mydata[!(mydata$Description == ""),]
#mydata <- mydata[!(mydata$Description == "DOTCOM POSTAGE"),]
#write.csv(mydata, "./data/online_retail_II_combined_clean.csv")
#remove 1st column (counting # of items in basket)
#mydata <- mydata[,-1]
#write updated CSV with removed column
#mydata <- write.csv(mydata, "./data/groceriesClean.csv")
#read updated CSV into transactions object
#trans <- read.transactions("./data/groceriesClean.csv", format="single", sep=",", cols=1)
colvec <- c("InvoiceNo","Description")
# read transactions from csv
trans <- read.transactions(
file = "./data/online_retail_II_combined_clean.csv",
format = "single",
header = TRUE,
sep = ",",
cols=colvec,
rm.duplicates = T
)
itemFrequencyPlot(trans,topN=20,type="absolute",main="Absolute Item Frequency Plot")
association.rules <- apriori(trans, parameter = list(supp=0.005, conf=0.5,maxlen=20))
inspect(association.rules)
#save(association.rules, file="rules.RData")
#generate sample shopping cart
cart <- c("CHARLOTTE BAG SUKI DESIGN",
"PACK OF 72 RETROSPOT CAKE CASES",
"RED RETROSPOT CHARLOTTE BAG",
"REGENCY CAKESTAND 3 TIER",
"WOODLAND CHARLOTTE BAG")
#cart <- as(list(cart), "itemMatrix")
#generaet a subset of the full list of rules, where the lhs matches an exact subset of the cart and the rhs
#does not match an exact subset of the cart (rhs is not already in cart)
rules.sub <- subset(association.rules, subset = lhs %oin% cart & !(rhs %oin% cart))
#rules.sub <- is.subset(association.rules, cart, proper = FALSE)
#shows subset of rules matching cart
inspect(rules.sub)
#converts subset of rules to data frame, separating out lhs and rhs
recom <- DATAFRAME(rules.sub, separate=TRUE)
#prints out only rhs (will be used to generate recommendation)
print(recom$RHS, max.levels = 0)
save(association.rules)
#export rules data to file
save(association.rules, file="rules.RData")
#export rules data to file
save(association.rules, file="rules.RData")
